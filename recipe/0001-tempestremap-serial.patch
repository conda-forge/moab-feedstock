diff --git a/src/Remapping/TempestRemapper.cpp b/src/Remapping/TempestRemapper.cpp
index 90a4ece30..eb6d647cf 100644
--- a/src/Remapping/TempestRemapper.cpp
+++ b/src/Remapping/TempestRemapper.cpp
@@ -806,19 +806,23 @@ moab::ErrorCode moab::TempestRemapper::WriteTempestIntersectionMesh( std::string
 ///////////////////////////////////////////////////////////////////////////////////
 
 #ifndef MOAB_HAVE_MPI
-static ErrorCode assign_vertex_element_IDs( moab::Interface* mbImpl, Tag idtag, EntityHandle this_set,
-                                            const int dimension = 2, const int start_id = 1 )
+ErrorCode TempestRemapper::assign_vertex_element_IDs( Tag idtag, EntityHandle this_set,
+                                            const int dimension, const int start_id )
 {
+    assert(idtag);
+
     ErrorCode rval;
     Range entities;
-    rval = mbImpl->get_entities_by_dimension( this_set, dimension, entities );MB_CHK_SET_ERR( rval, "Failed to get entities" );
+    rval = m_interface->get_entities_by_dimension( this_set, dimension, entities );MB_CHK_SET_ERR( rval, "Failed to get entities" );
+
+    if (entities.size() == 0) return moab::MB_SUCCESS;
 
     int idoffset = start_id;
     std::vector< int > gid( entities.size() );
     for( unsigned i = 0; i < entities.size(); ++i )
         gid[i] = idoffset++;
 
-    rval = mbImpl->tag_set_data( idtag, entities, &gid[0] );MB_CHK_ERR( rval );
+    rval = m_interface->tag_set_data( idtag, entities, &gid[0] );MB_CHK_ERR( rval );
 
     return moab::MB_SUCCESS;
 }
@@ -1191,7 +1195,7 @@ ErrorCode TempestRemapper::ComputeOverlapMesh( bool kdtree_search, bool use_temp
 #ifdef MOAB_HAVE_MPI
                 rval = m_pcomm->assign_global_ids( m_source_set, 2, 1, false, true, false );MB_CHK_ERR( rval );
 #else
-                rval = assign_vertex_element_IDs( m_interface, gidtag, m_source_set, 2, 1 );MB_CHK_ERR( rval );
+                rval = this->assign_vertex_element_IDs( gidtag, m_source_set, 2, 1 );MB_CHK_ERR( rval );
 #endif
             }
         }
@@ -1209,7 +1213,7 @@ ErrorCode TempestRemapper::ComputeOverlapMesh( bool kdtree_search, bool use_temp
 #ifdef MOAB_HAVE_MPI
                 rval = m_pcomm->assign_global_ids( m_target_set, 2, 1, false, true, false );MB_CHK_ERR( rval );
 #else
-                rval = assign_vertex_element_IDs( m_interface, gidtag, m_target_set, 2, 1 );MB_CHK_ERR( rval );
+                rval = this->assign_vertex_element_IDs( gidtag, m_target_set, 2, 1 );MB_CHK_ERR( rval );
 #endif
             }
         }
diff --git a/src/moab/Remapping/TempestOnlineMap.hpp b/src/moab/Remapping/TempestOnlineMap.hpp
index 1ec462229..0a25383d9 100644
--- a/src/moab/Remapping/TempestOnlineMap.hpp
+++ b/src/moab/Remapping/TempestOnlineMap.hpp
@@ -25,8 +25,10 @@
 
 ///////////////////////////////////////////////////////////////////////////////
 
+#if !defined(RECTANGULAR_TRUNCATION) && !defined(TRIANGULAR_TRUNCATION)
 #define RECTANGULAR_TRUNCATION
 // #define TRIANGULAR_TRUNCATION
+#endif
 
 ///////////////////////////////////////////////////////////////////////////////
 
diff --git a/src/moab/Remapping/TempestRemapper.hpp b/src/moab/Remapping/TempestRemapper.hpp
index d2c1fc705..3a557419e 100644
--- a/src/moab/Remapping/TempestRemapper.hpp
+++ b/src/moab/Remapping/TempestRemapper.hpp
@@ -229,6 +229,14 @@ class TempestRemapper : public Remapper
     ///	</summary>
     moab::ErrorCode GetOverlapAugmentedEntities( moab::Range& sharedGhostEntities );
 
+#ifndef MOAB_HAVE_MPI
+    /// <summary>
+    ///    Internal method to assign vertex and element global IDs if one does not exist already
+    /// </summary>
+    moab::ErrorCode assign_vertex_element_IDs( Tag idtag, EntityHandle this_set,
+                                            const int dimension = 2, const int start_id = 1 );
+#endif
+
   public:               // public members
     bool meshValidate;  // Validate the mesh after loading from file
 
diff --git a/src/moab/iMOAB.h b/src/moab/iMOAB.h
index 4ee90d90e..3d1423047 100644
--- a/src/moab/iMOAB.h
+++ b/src/moab/iMOAB.h
@@ -706,6 +706,43 @@ ErrCode iMOAB_ReceiveElementTag(iMOAB_AppID pid, const iMOAB_String tag_storage_
 ErrCode iMOAB_ComputeCommGraph(iMOAB_AppID  pid1, iMOAB_AppID  pid2,  MPI_Comm* join,
     MPI_Group* group1, MPI_Group* group2, int * type1, int * type2, int *comp1, int *comp2);
 
+/**
+  \brief Recompute the communication graph between component and coupler, considering intersection coverage .
+  \note
+  Original communication graph for source used an initial partition, while during intersection some of the source
+  elements were sent to multiple tasks; send back the intersection coverage information for a direct communication
+  between source cx mesh on coupler tasks and source cc mesh on interested tasks on the component.
+  The intersection tasks will send to the original source component tasks, in a nonblocking way, the ids of all the cells
+  involved in intersection with the target cells.
+  The new ParCommGraph between cc source mesh and cx source mesh will be used just for tag migration, later on;
+  The original ParCommGraph will stay unchanged, because this source mesh could be used for other intersection (atm with lnd) ?
+  on component source tasks, we will wait for information; from each intx task, will receive cells ids involved in intx
+  \param[in]  join (MPI_Comm)                        communicator that overlaps component source PEs and coupler PEs
+  \param[in]  pid_src (iMOAB_AppID)                  moab id for the component mesh on component PE
+  \param[in]  pid_migr (iMOAB_AppID)                 moab id for the migrated mesh on coupler PEs
+  \param[in]  pid_intx (iMOAB_AppID)                 moab id for intersection mesh (on coupler PEs)
+  \param[in]  context_id (int*)                      id of the other component in intersection
+  */
+ErrCode iMOAB_CoverageGraph(MPI_Comm* join, iMOAB_AppID pid_src, iMOAB_AppID pid_migr, iMOAB_AppID pid_intx, int * context_id);
+
+/**
+  \brief Dump info about communication graph.
+  <B>Operations:</B> Collective per sender or receiver group
+
+  \param[in] pid  (iMOAB_AppID)                            The unique pointer to the application ID
+  \param[in] context_id  (int*)                            context id                                                       names are separated by ";", the same way as for tag migration
+  \param[in] is_sender (int*)                              is it called from sender or receiver side
+  \param[in] prefix  (iMOAB_String)                        prefix for file names; to differentiate stages
+  \param[in] prefix_len   (int)                            The length of the prefix string
+*/
+ErrCode iMOAB_DumpCommGraph                 (  iMOAB_AppID pid,
+                                               int* context_id,
+                                               int * is_sender,
+                                               const iMOAB_String prefix,
+                                               int prefix_length);
+
+#endif // #ifdef MOAB_HAVE_MPI
+
 #ifdef MOAB_HAVE_TEMPESTREMAP
 
 /**
@@ -742,26 +779,7 @@ ErrCode iMOAB_ComputeMeshIntersectionOnSphere ( iMOAB_AppID pid_source, iMOAB_Ap
 ErrCode iMOAB_ComputePointDoFIntersection ( iMOAB_AppID pid_src, iMOAB_AppID pid_tgt, iMOAB_AppID pid_intx );
 
 /**
-  \brief Recompute the communication graph between component and coupler, considering intersection coverage .
-  \note
-  Original communication graph for source used an initial partition, while during intersection some of the source
-  elements were sent to multiple tasks; send back the intersection coverage information for a direct communication
-  between source cx mesh on coupler tasks and source cc mesh on interested tasks on the component.
-  The intersection tasks will send to the original source component tasks, in a nonblocking way, the ids of all the cells
-  involved in intersection with the target cells.
-  The new ParCommGraph between cc source mesh and cx source mesh will be used just for tag migration, later on;
-  The original ParCommGraph will stay unchanged, because this source mesh could be used for other intersection (atm with lnd) ?
-  on component source tasks, we will wait for information; from each intx task, will receive cells ids involved in intx
-  \param[in]  join (MPI_Comm)                        communicator that overlaps component source PEs and coupler PEs
-  \param[in]  pid_src (iMOAB_AppID)                  moab id for the component mesh on component PE
-  \param[in]  pid_migr (iMOAB_AppID)                 moab id for the migrated mesh on coupler PEs
-  \param[in]  pid_intx (iMOAB_AppID)                 moab id for intersection mesh (on coupler PEs)
-  \param[in]  context_id (int*)                      id of the other component in intersection
-  */
-ErrCode iMOAB_CoverageGraph(MPI_Comm* join, iMOAB_AppID pid_src, iMOAB_AppID pid_migr, iMOAB_AppID pid_intx, int * context_id);
-
-/**
-  \brief Compute the projection weights to transfer a solution from a source surface mesh to a destination mesh defined on a sphere. 
+  \brief Compute the projection weights to transfer a solution from a source surface mesh to a destination mesh defined on a sphere.
   The intersection of the mesh should be computed a-priori.
 
   \note
@@ -771,16 +789,16 @@ ErrCode iMOAB_CoverageGraph(MPI_Comm* join, iMOAB_AppID pid_src, iMOAB_AppID pid
   <B>Operations:</B> Collective
 
   \param[in/out] pid_intersection (iMOAB_AppID)            The unique pointer to the intersection application ID
-  \param[in] solution_weights_identifier  (iMOAB_String)   The unique identifier used to store the computed projection weights locally. Typically, 
+  \param[in] solution_weights_identifier  (iMOAB_String)   The unique identifier used to store the computed projection weights locally. Typically,
                                                            values could be identifiers such as "scalar", "flux" or "custom".
   \param[in] disc_method_source  (iMOAB_String)            The discretization type ("fv", "cgll", "dgll") for the solution field on the source grid
   \param[in] disc_order_source   (int *)                   The discretization order for the solution field on the source grid
   \param[in] disc_method_target  (iMOAB_String)            The discretization type ("fv", "cgll", "dgll") for the solution field on the source grid
   \param[in] disc_order_target   (int *)                   The discretization order for the solution field on the source grid
-  \param[in] fMonotoneTypeID   (int *)                     The flag to indicate whether solution monotonicity is to be preserved. 0: none, 1: 
+  \param[in] fMonotoneTypeID   (int *)                     The flag to indicate whether solution monotonicity is to be preserved. 0: none, 1:
   \param[in] fVolumetric   (int *)                         The flag to indicate whether we need to compute volumetric projection weights
   \param[in] fNoConservation   (int *)                     The flag to indicate whether to ignore conservation of solution field during projection
-  \param[in] fValidate   (int *)                           The flag to indicate whether to validate the consistency and conservation of solution field during projection; 
+  \param[in] fValidate   (int *)                           The flag to indicate whether to validate the consistency and conservation of solution field during projection;
                                                            Production runs should not have this flag enabled to minimize collective operations.
   \param[in] source_solution_tag_dof_name   (iMOAB_String) The global DoF IDs corresponding to participating degrees-of-freedom for the source discretization
   \param[in] target_solution_tag_dof_name   (iMOAB_String) The global DoF IDs corresponding to participating degrees-of-freedom for the target discretization
@@ -809,7 +827,7 @@ ErrCode iMOAB_ComputeScalarProjectionWeights ( iMOAB_AppID pid_intersection,
   <B>Operations:</B> Collective
 
   \param[in/out] pid_intersection (iMOAB_AppID)            The unique pointer to the intersection application ID
-  \param[in] solution_weights_identifier  (iMOAB_String)   The unique identifier used to store the computed projection weights locally. Typically, 
+  \param[in] solution_weights_identifier  (iMOAB_String)   The unique identifier used to store the computed projection weights locally. Typically,
                                                            values could be identifiers such as "scalar", "flux" or "custom".
   \param[in] source_solution_tag_name   (iMOAB_String)     list of tag names corresponding to participating degrees-of-freedom for the source discretization;
                                                            names are separated by ";", the same way as for tag migration
@@ -818,7 +836,7 @@ ErrCode iMOAB_ComputeScalarProjectionWeights ( iMOAB_AppID pid_intersection,
   \param[in] source_solution_tag_name_length   (int)       The length of the source solution field tag name string
   \param[in] target_solution_tag_name_length   (int)       The length of the target solution field tag name string
 */
-ErrCode iMOAB_ApplyScalarProjectionWeights (   iMOAB_AppID pid_intersection, 
+ErrCode iMOAB_ApplyScalarProjectionWeights (   iMOAB_AppID pid_intersection,
                                                const iMOAB_String solution_weights_identifier, /* "scalar", "flux", "custom" */
                                                const iMOAB_String source_solution_tag_name,
                                                const iMOAB_String target_solution_tag_name,
@@ -826,26 +844,8 @@ ErrCode iMOAB_ApplyScalarProjectionWeights (   iMOAB_AppID pid_intersection,
                                                int source_solution_tag_name_length,
                                                int target_solution_tag_name_length );
 
-/**
-  \brief Dump info about communication graph.
-  <B>Operations:</B> Collective per sender or receiver group
-
-  \param[in] pid  (iMOAB_AppID)                            The unique pointer to the application ID
-  \param[in] context_id  (int*)                            context id                                                       names are separated by ";", the same way as for tag migration
-  \param[in] is_sender (int*)                              is it called from sender or receiver side
-  \param[in] prefix  (iMOAB_String)                        prefix for file names; to differentiate stages
-  \param[in] prefix_len   (int)                            The length of the prefix string
-*/
-ErrCode iMOAB_DumpCommGraph                 (  iMOAB_AppID pid,
-                                               int* context_id,
-                                               int * is_sender,
-                                               const iMOAB_String prefix,
-                                               int prefix_length);
-
 #endif // #ifdef MOAB_HAVE_TEMPESTREMAP
 
-#endif // #ifdef MOAB_HAVE_MPI
-
 #ifdef __cplusplus
 }
 #endif // #ifdef __cplusplus
diff --git a/src/moab/imoab_protos.h b/src/moab/imoab_protos.h
index 6fbb516af..5a8d05d25 100644
--- a/src/moab/imoab_protos.h
+++ b/src/moab/imoab_protos.h
@@ -3,12 +3,12 @@
 
 #include "moab/MOABConfig.h"
 
-#if defined(MOAB_FC_FUNC_)
+#if defined( MOAB_FC_FUNC_ )
 #define IMOAB_FC_WRAPPER MOAB_FC_FUNC_
-#elif defined(MOAB_FC_FUNC)
+#elif defined( MOAB_FC_FUNC )
 #define IMOAB_FC_WRAPPER MOAB_FC_FUNC
 #else
-#define IMOAB_FC_WRAPPER(name,NAME) name
+#define IMOAB_FC_WRAPPER( name, NAME ) name
 #endif
 
 #define iMOAB_Initialize                     IMOAB_FC_WRAPPER( imoab_initialize, IMOAB_INITIALIZE )
@@ -57,11 +57,16 @@
 #define iMOAB_ReceiveElementTag              IMOAB_FC_WRAPPER( imoab_receiveelementtag, IMOAB_RECEIVEELEMENTTAG )
 #define iMOAB_DumpCommGraph                  IMOAB_FC_WRAPPER( imoab_dumpcommgraph, IMOAB_DUMPCOMMGRAPH)
 #define iMOAB_ComputeCommGraph               IMOAB_FC_WRAPPER( imoab_computecommgraph, IMOAB_COMPUTECOMMGRAPH)
+
 #ifdef MOAB_HAVE_TEMPESTREMAP
+
 #define iMOAB_ComputeMeshIntersectionOnSphere IMOAB_FC_WRAPPER( imoab_computemeshintersectiononsphere, IMOAB_COMPUTEMESHINTERSECTIONONSPHERE)
 #define iMOAB_ComputePointDoFIntersection    IMOAB_FC_WRAPPER( imoab_computepointdofintersection, IMOAB_COMPUTEPOINTDOFINTERSECTION)
 #define iMOAB_ComputeScalarProjectionWeights IMOAB_FC_WRAPPER(imoab_computescalarprojectionweights,IMOAB_COMPUTESCALARPROJECTIONWEIGHTS)
 #define iMOAB_ApplyScalarProjectionWeights   IMOAB_FC_WRAPPER(imoab_applyscalarprojectionweights, IMOAB_APPLYSCALARPROJECTIONWEIGHTS)
 #define iMOAB_CoverageGraph                  IMOAB_FC_WRAPPER(imoab_coveragegraph, IMOAB_COVERAGEGRAPH)
+
 #endif
+
 #endif /*IMOAB_PROTOS_H */
+
diff --git a/test/test_remapping.cpp b/test/test_remapping.cpp
index a7c8dfce2..8f49890b4 100644
--- a/test/test_remapping.cpp
+++ b/test/test_remapping.cpp
@@ -177,14 +177,19 @@ void test_tempest_to_moab_convert()
     moab::Interface* mbCore = new( std::nothrow ) moab::Core;
     CHECK( NULL != mbCore );
 
+#ifdef MOAB_HAVE_MPI
     moab::ParallelComm* pcomm = new moab::ParallelComm( mbCore, MPI_COMM_WORLD, 0 );
-
     moab::TempestRemapper* remapper = new moab::TempestRemapper( mbCore, pcomm );
+#else
+    moab::TempestRemapper* remapper = new moab::TempestRemapper( mbCore );
+#endif
     remapper->meshValidate          = true;
     remapper->constructEdgeMap      = true;
     remapper->initialize();
 
+#ifdef MOAB_HAVE_MPI
     rval = pcomm->check_all_shared_handles();CHECK_ERR( rval );
+#endif
 
     rval = remapper->LoadMesh( moab::Remapper::SourceMesh, outFilenames[0], moab::TempestRemapper::CS );CHECK_ERR( rval );
 
@@ -210,6 +215,9 @@ void test_tempest_to_moab_convert()
     CHECK_EQUAL( tempest_elems_src, tempest_elems_tgt );
 
     delete remapper;
+#ifdef MOAB_HAVE_MPI
     delete pcomm;
+#endif
     delete mbCore;
 }
+
diff --git a/tools/convert.cpp b/tools/convert.cpp
index 1eb059881..3f6a42fe5 100644
--- a/tools/convert.cpp
+++ b/tools/convert.cpp
@@ -761,8 +761,8 @@ int main( int argc, char* argv[] )
 #ifdef MOAB_HAVE_MPI
         result = pcomm->assign_global_ids( srcmesh, 2, 1, false );MB_CHK_ERR( result );
 #else
-        result = remapper->assign_vertex_element_IDs( gMB, gidTag, srcmesh, 2, 1 );MB_CHK_ERR( result );
-        result = remapper->assign_vertex_element_IDs( gMB, gidTag, srcmesh, 0, 1 );MB_CHK_ERR( result );
+        result = remapper->assign_vertex_element_IDs( gidTag, srcmesh, 2, 1 );MB_CHK_ERR( result );
+        result = remapper->assign_vertex_element_IDs( gidTag, srcmesh, 0, 1 );MB_CHK_ERR( result );
 #endif
     }
 
diff --git a/tools/mbtempest.cpp b/tools/mbtempest.cpp
index 24fda915f..0d633ce42 100644
--- a/tools/mbtempest.cpp
+++ b/tools/mbtempest.cpp
@@ -74,7 +74,7 @@ struct ToolContext
     ToolContext ( moab::Interface* icore ) :
             mbcore(icore),
             proc_id ( 0 ), n_procs ( 1 ),
-            outputFormatter ( std::cout, 0, 0 )
+            outputFormatter ( std::cout, 0, 0 ),
 #endif
           blockSize( 5 ), outFilename( "output.exo" ), intxFilename( "" ), meshType( moab::TempestRemapper::DEFAULT ),
           computeDual( false ), computeWeights( false ), verifyWeights( false ), ensureMonotonicity( 0 ),
